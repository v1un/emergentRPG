name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  lint-and-test-backend:
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd mongosh
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements-dev.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install Python dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
    
    - name: Lint with flake8
      run: |
        cd backend
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Format check with black
      run: |
        cd backend
        black --check --diff .
    
    - name: Type check with mypy
      run: |
        cd backend
        mypy . --ignore-missing-imports
    
    - name: Test with pytest
      env:
        MONGO_URL: mongodb://localhost:27017/test_emergentRPG
        GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY || 'test_key' }}
      run: |
        cd backend
        pytest --cov=. --cov-report=xml --cov-report=html
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: backend/coverage.xml
        flags: backend
        name: backend-coverage

  lint-and-test-frontend:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Lint frontend code
      run: |
        cd frontend
        npm run lint || echo "No lint script found, skipping..."
    
    - name: Run frontend tests
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false || echo "No tests found, skipping..."
    
    - name: Build frontend
      run: |
        cd frontend
        npm run build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: frontend/build/

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  integration-test:
    runs-on: ubuntu-latest
    needs: [lint-and-test-backend, lint-and-test-frontend]
    
    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd mongosh
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install backend dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Build frontend
      run: |
        cd frontend
        npm run build
    
    - name: Start backend server
      env:
        MONGO_URL: mongodb://localhost:27017/test_emergentRPG
        GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY || 'test_key' }}
      run: |
        cd backend
        python -m uvicorn main:app --host 0.0.0.0 --port 8001 &
        echo $! > backend.pid
    
    - name: Wait for backend to be ready
      run: |
        for i in {1..30}; do
          if curl -f http://localhost:8001/api/health; then
            echo "Backend is ready"
            break
          fi
          echo "Waiting for backend... ($i/30)"
          sleep 2
        done
    
    - name: Run integration tests
      run: |
        # Add your integration tests here
        curl -f http://localhost:8001/api/health
        echo "Basic health check passed"
    
    - name: Stop backend server
      run: |
        if [ -f backend.pid ]; then
          kill $(cat backend.pid) || true
          rm backend.pid
        fi
